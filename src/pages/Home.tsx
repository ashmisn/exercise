import React, { useState, useEffect } from 'react';

import { Activity, ArrowRight, CheckCircle, Download, Monitor, TrendingUp, Clock, Calendar, User, Clock as ClockIcon } from 'lucide-react';

// FIX: Corrected import paths from '../../' to '../'Â 

import { useAuth } from '../contexts/AuthContext';Â 

import { Chatbot } from '../components/Chatbot';Â 

import RecoveryPredictor from '../components/RecoveryPredictor';Â 



// --- Interface Definitions ---

interface Exercise {

Â  name: string;

Â  description: string;

Â  target_reps: number;

Â  sets: number;

Â  rest_seconds: number;

}



interface ExercisePlan {

Â  ailment: string;

Â  exercises: Exercise[];

Â  difficulty_level: string;

Â  duration_weeks: number;

}



interface HomeProps {

Â  onStartSession: (plan: ExercisePlan, exercise: Exercise) => void;

}



// --- Configuration ---

const BACKEND_URL = 'https://exercise-7edj.onrender.com';



const AILMENTS = [

Â  { value: 'shoulder injury', label: 'Shoulder Injury', icon: 'ðŸ’ª' },

Â  { value: 'elbow injury', label: 'Elbow Injury', icon: 'ðŸ¦¾' },

Â  { value: 'wrist injury', label: 'Wrist Injury', icon: 'âœ‹' },

Â  { value: 'leg/knee injury', label: 'Leg/Knee Injury', icon: 'ðŸ¦µ' },

];



// Mock data for the DashboardÂ 

const MOCK_PROGRESS = {

Â  totalReps: 1240,

Â  avgAccuracy: 92.5,

Â  sessionsThisWeek: 4,

Â  lastSession: 'Shoulder Flexion',

Â  lastSessionDate: 'October 4, 2025',

};



// =========================================================================

// Dashboard Component (Main Layout)

// =========================================================================



export const Home: React.FC<HomeProps> = ({ onStartSession }) => {

Â  const { user } = useAuth();

Â  const [selectedAilment, setSelectedAilment] = useState('');

Â  const [exercisePlan, setExercisePlan] = useState<ExercisePlan | null>(null);

Â  const [loading, setLoading] = useState(false);

Â  const [error, setError] = useState('');

Â Â 

Â  // NEW STATE: User profile information

Â  const [userProfile, setUserProfile] = useState({

Â  Â  name: 'Patient Name',

Â  Â  age: 30,

Â  Â  height: 175, // cm

Â  Â  weight: 75,Â  // kg

Â  Â  existingAilments: 'None',

Â  });



Â  // NEW STATE: Controls which view is currently displayed

Â  const [currentView, setCurrentView] = useState<'dashboard' | 'predictor' | 'profile'>('dashboard');



Â  // --- API Handlers ---

Â  const handleGetPlan = async () => {

Â  Â  if (!selectedAilment) {

Â  Â  Â  setError('Please select an ailment');

Â  Â  Â  return;

Â  Â  }



Â  Â  setLoading(true);

Â  Â  setError('');



Â  Â  try {

Â  Â  Â  const response = await fetch(`${BACKEND_URL}/api/get_plan`, {

Â  Â  Â  Â  method: 'POST',

Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },

Â  Â  Â  Â  body: JSON.stringify({ ailment: selectedAilment }),

Â  Â  Â  });



Â  Â  Â  if (!response.ok) {

Â  Â  Â  Â  const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));

Â  Â  Â  Â  throw new Error(errorData.detail || 'Failed to fetch exercise plan');

Â  Â  Â  }



Â  Â  Â  const data = await response.json();

Â  Â  Â  setExercisePlan(data);

Â  Â  } catch (err: any) {

Â  Â  Â  setError(`Failed to load plan: ${err.message}. Make sure the backend is running.`);

Â  Â  } finally {

Â  Â  Â  setLoading(false);

Â  Â  }

Â  };



Â  const handleDownloadPDF = async () => {

Â  Â  if (!user?.id) {

Â  Â  Â  console.warn('User ID missing for PDF download.');

Â  Â  Â  setError('Login required to download report.');

Â  Â  Â  return;

Â  Â  }

Â  Â  setError('');



Â  Â  try {

Â  Â  Â  const response = await fetch(`${BACKEND_URL}/api/pdf/${user.id}`, {

Â  Â  Â  Â  method: 'GET',

Â  Â  Â  });



Â  Â  Â  if (!response.ok) {

Â  Â  Â  Â  const text = await response.text();

Â  Â  Â  Â  let errorMessage = `Failed to fetch PDF. Server status: ${response.status}`;

Â  Â  Â  Â  try {

Â  Â  Â  Â  Â  Â  const errorData = JSON.parse(text);

Â  Â  Â  Â  Â  Â  errorMessage = errorData.detail || errorMessage;

Â  Â  Â  Â  } catch { /* response was not JSON */ }

Â  Â  Â  Â  throw new Error(errorMessage);

Â  Â  Â  }



Â  Â  Â  const blob = await response.blob();

Â  Â  Â  const pdfBlob = new Blob([blob], { type: 'application/pdf' });Â 

    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed, so we add 1
    const day = String(today.getDate()).padStart(2, '0');
    const formattedDate = `${year}-${month}-${day}`;


Â  Â  Â  const contentDisposition = response.headers.get('Content-Disposition');

let filename = `${userProfile.name}-Rebound-Report-${formattedDate}.pdf`;

Â  Â  Â  if (contentDisposition && contentDisposition.indexOf('filename=') !== -1) {

Â  Â  Â  Â  Â  filename = contentDisposition.split('filename=')[1].replace(/"/g, '');

Â  Â  Â  }

Â  Â  Â Â 

Â  Â  Â  const url = window.URL.createObjectURL(pdfBlob);Â 

Â  Â  Â  const a = document.createElement('a');

Â  Â  Â  a.href = url;

Â  Â  Â  a.download = filename;Â 

Â  Â  Â  document.body.appendChild(a);

Â  Â  Â  a.click();

Â  Â  Â  a.remove();

Â  Â  Â  window.URL.revokeObjectURL(url);



Â  Â  } catch (err: any) {

Â  Â  Â  console.error('Download failed', err);

Â  Â  Â  setError(`Could not download PDF report: ${err.message}.`);

Â  Â  }

Â  };

Â Â 

Â  // --- Profile Input Handler ---

Â  const handleProfileChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {

Â  Â  const { name, value, type } = e.target;

Â  Â  setUserProfile(prev => ({

Â  Â  Â  Â  ...prev,

Â  Â  Â  Â  [name]: (type === 'number' ? parseFloat(value) : value)

Â  Â  }));

Â  };

Â Â 

Â  // --- View Rendering ---

Â Â 

Â  // View 1: Prediction Form

Â  if (currentView === 'predictor') {

Â  Â  return (

Â  Â  Â  Â  <div className="min-h-screen bg-gray-50 py-10 px-4 sm:px-6 lg:px-8">

Â  Â  Â  Â  Â  Â  <div className="max-w-4xl mx-auto">

Â  Â  Â  Â  Â  Â  Â  Â  <buttonÂ 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setCurrentView('dashboard')}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mb-6 flex items-center text-indigo-600 hover:text-indigo-800 font-medium transition-colors"

Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &larr; Back to Dashboard

Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  Â  <RecoveryPredictor />

Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  </div>

Â  Â  );

Â  }

Â Â 

Â  // View 2: Profile Edit Form

Â  if (currentView === 'profile') {

Â  Â  const inputClasses = "w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-150";

Â  Â  const labelClasses = "block text-sm font-medium text-gray-700 mb-1";

Â  Â  Â Â 

Â  Â  Â  return (

Â  Â  Â  Â  Â  <div className="min-h-screen bg-gray-50 py-10 px-4 sm:px-6 lg:px-8">

Â  Â  Â  Â  Â  Â  Â  <div className="max-w-xl mx-auto bg-white rounded-3xl shadow-2xl p-8 border-t-8 border-blue-500">

Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-3xl font-bold text-gray-900 mb-6">Edit User Profile</h2>

Â  Â  Â  Â  Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-6">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="name" className={labelClasses}>Full Name</label>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="text" id="name" name="name" value={userProfile.name} onChange={handleProfileChange} className={inputClasses} required />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 gap-4">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="age" className={labelClasses}>Age (Years)</label>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="number" id="age" name="age" value={userProfile.age} onChange={handleProfileChange} className={inputClasses} min="1" max="100" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="height" className={labelClasses}>Height (cm)</label>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="number" id="height" name="height" value={userProfile.height} onChange={handleProfileChange} className={inputClasses} min="50" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 gap-4">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="weight" className={labelClasses}>Weight (kg)</label>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="number" id="weight" name="weight" value={userProfile.weight} onChange={handleProfileChange} className={inputClasses} min="20" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="existingAilments" className={labelClasses}>Existing Ailments (Comma Separated)</label>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="text" id="existingAilments" name="existingAilments" value={userProfile.existingAilments} onChange={handleProfileChange} className={inputClasses} placeholder="e.g., Asthma, Mild Arthritis" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setCurrentView('dashboard')}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition-all shadow-lg"

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Save Profile & Back to Dashboard

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  </div>

Â  Â  Â  );

Â  }





Â  // Default: Dashboard View

Â  return (

Â  Â  // 1. Aesthetic Background: Soft gradients and rounded corners

Â  Â  <div className="min-h-screen bg-gray-50 font-sans p-4 md:p-8">

Â  Â  Â  <div className="max-w-7xl mx-auto">

Â  Â  Â  Â  {/* Header Section */}

Â  Â  Â  Â  <header className="flex items-center justify-between mb-12 bg-white p-6 rounded-3xl shadow-lg border-b-4 border-blue-100">

Â  Â  Â  Â  Â  <div className="flex items-center">

Â  Â  Â  Â  Â  Â  <div className="bg-gradient-to-br from-blue-600 to-indigo-700 p-3 rounded-xl shadow-xl">

Â  Â  Â  Â  Â  Â  Â  <Activity className="w-8 h-8 text-white" />

Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-extrabold text-gray-900 ml-4 tracking-tight">

Â  Â  Â  Â  Â  Â  Â  Your Dashboard

Â  Â  Â  Â  Â  Â  </h1>

Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Display User Name and Email */}

Â  Â  Â  Â  Â  <div className="flex items-center text-gray-700 font-medium cursor-pointer" onClick={() => setCurrentView('profile')}>

Â  Â  Â  Â  Â  Â  <User className="w-5 h-5 mr-2 text-indigo-500" />

Â  Â  Â  Â  Â  Â  <span>{userProfile.name} ({user?.email || 'Guest'})</span>

Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  </header>

Â  Â  Â  Â Â 

Â  Â  Â  Â  {/* --- User Profile Card --- */}

Â  Â  Â  Â  <div className="bg-white rounded-3xl shadow-lg p-6 mb-8 border-l-8 border-indigo-300">

Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-3">

Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-bold text-gray-800">Patient Data</h3>

Â  Â  Â  Â  Â  Â  Â  Â  <buttonÂ 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setCurrentView('profile')}Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-sm text-indigo-600 hover:text-indigo-800 font-medium"

Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Edit Profile

Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">

Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-gray-600">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold text-gray-900 block">{userProfile.age}</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Age

Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-gray-600">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold text-gray-900 block">{userProfile.height} cm</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Height

Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-gray-600">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold text-gray-900 block">{userProfile.weight} kg</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Weight

Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-gray-600 md:col-span-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold text-gray-900 block truncate">{userProfile.existingAilments || 'None'}</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Existing Ailments

Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  </div>



Â  Â  Â  Â  {/* 2. Main Dashboard Grid */}

Â  Â  Â  Â  <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">

Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  {/* COLUMN 1/3: Plan Selection & Display (Main Focus) */}

Â  Â  Â  Â  Â  <div className="xl:col-span-2 space-y-8">

Â  Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  Â  {/* Error Message Display */}

Â  Â  Â  Â  Â  Â  {error && (

Â  Â  Â  Â  Â  Â  Â  <div className="bg-red-50 border border-red-300 text-red-700 px-6 py-4 rounded-xl shadow-md text-sm">

Â  Â  Â  Â  Â  Â  Â  Â  {error}

Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  )}



Â  Â  Â  Â  Â  Â  {/* A. Plan Selection View */}

Â  Â  Â  Â  Â  Â  {!exercisePlan ? (

Â  Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-3xl shadow-2xl p-8 border-t-8 border-blue-500">

Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-3xl font-bold text-gray-900 mb-2">

Â  Â  Â  Â  Â  Â  Â  Â  Â  1. Choose Your Focus Area

Â  Â  Â  Â  Â  Â  Â  Â  </h2>

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 mb-8">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Select the area requiring therapy to generate your personalized program.

Â  Â  Â  Â  Â  Â  Â  Â  </p>



Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">

Â  Â  Â  Â  Â  Â  Â  Â  Â  {AILMENTS.map((ailment) => (

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={ailment.value}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setSelectedAilment(ailment.value)}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`w-full p-6 rounded-2xl border-2 transition-all text-left shadow-lg transform hover:scale-[1.02] hover:shadow-xl duration-300 ${

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedAilment === ailment.value

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'border-indigo-600 bg-indigo-50 ring-4 ring-indigo-200'

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'border-gray-200 bg-white hover:border-blue-400'

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-4xl mr-4">{ailment.icon}</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-extrabold text-gray-900">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {ailment.label}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Specialized {ailment.label.toLowerCase()} recovery.

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedAilment === ailment.value && (

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CheckCircle className="w-6 h-6 text-indigo-600 ml-auto flex-shrink-0" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}

Â  Â  Â  Â  Â  Â  Â  Â  </div>



Â  Â  Â  Â  Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleGetPlan}

Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={loading || !selectedAilment}

Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full bg-gradient-to-r from-teal-500 to-green-600 text-white py-4 rounded-xl font-bold text-lg tracking-wider shadow-xl shadow-teal-500/30 hover:shadow-green-500/50 hover:from-teal-600 hover:to-green-700 focus:ring-4 focus:ring-teal-200 transition-all duration-300 transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"

Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  {loading ? (

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </svg>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Generating Plan...

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>

Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Get My Custom Plan

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ArrowRight className="w-5 h-5 ml-2" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>

Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  ) : (

Â  Â  Â  Â  Â  Â  Â  // B. Plan Display View

Â  Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-3xl shadow-2xl p-8 border-t-8 border-teal-500">

Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-3xl font-extrabold text-gray-900 mb-3">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Your Custom Plan: {exercisePlan.ailment}

Â  Â  Â  Â  Â  Â  Â  Â  </h2>

Â  Â  Â  Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  Â  Â  Â  {/* Plan Metadata */}

Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap items-center gap-6 text-sm text-gray-600 mb-6 border-b pb-4">

Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full font-bold shadow-sm">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {exercisePlan.difficulty_level.toUpperCase()}

Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium flex items-center gap-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Clock className="w-4 h-4 text-gray-400" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {exercisePlan.duration_weeks} Weeks

Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleDownloadPDF}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-5 py-2 rounded-xl hover:from-blue-700 hover:to-indigo-700 flex items-center gap-2 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"

Â  Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Download className="w-5 h-5" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Download PDF

Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  Â  </div>



Â  Â  Â  Â  Â  Â  Â  Â  {/* Exercise List */}

Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid gap-6">

Â  Â  Â  Â  Â  Â  Â  Â  Â  {exercisePlan.exercises.map((exercise, index) => (

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={index}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="border-2 border-gray-100 rounded-xl p-6 transition-all bg-gray-50/50 shadow-md flex flex-col md:flex-row items-center justify-between hover:border-blue-500"

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mb-4 md:mb-0 md:mr-6 flex-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-bold text-gray-900 mb-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {index + 1}. {exercise.name}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 mb-3 text-sm">{exercise.description}</p>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-x-4 gap-y-1 text-sm text-gray-700 font-medium">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-blue-600 flex items-center gap-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Activity className="w-4 h-4" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Target: {exercise.target_reps} reps

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>|</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Sets: {exercise.sets}</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>|</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Rest: {exercise.rest_seconds}s</span>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => onStartSession(exercisePlan, exercise)}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-gradient-to-r from-green-500 to-teal-600 text-white px-6 py-3 rounded-xl font-semibold hover:from-green-600 hover:to-teal-700 transition-all whitespace-nowrap shadow-lg flex items-center justify-center transform hover:scale-[1.05]"

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Start Session

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Monitor className="w-5 h-5 ml-2" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}

Â  Â  Â  Â  Â  Â  Â  Â  </div>



Â  Â  Â  Â  Â  Â  Â  Â  {/* Reset Button */}

Â  Â  Â  Â  Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setExercisePlan(null)}

Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-8 w-full bg-gray-100 text-gray-700 py-3 rounded-xl font-medium hover:bg-gray-200 transition-all shadow-md border"

Â  Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  Â  Choose Different Ailment

Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  </div>



Â  Â  Â  Â  Â  {/* COLUMN 2/3: Progress Dashboard (Fixed/Stats View) */}

Â  Â  Â  Â  Â  <div className="xl:col-span-1 space-y-8">

Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-800 tracking-tight">

Â  Â  Â  Â  Â  Â  Â  My Progress Summary

Â  Â  Â  Â  Â  Â  </h2>

Â  Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  Â  {/* NEW BUTTON: Recovery Predictor Link */}

Â  Â  Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setCurrentView('predictor')}

Â  Â  Â  Â  Â  Â  Â  Â  className="w-full bg-indigo-500 text-white px-5 py-3 rounded-xl hover:bg-indigo-600 flex items-center justify-center gap-2 transition-all shadow-xl transform hover:scale-[1.01]"

Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  <ClockIcon className="w-5 h-5" />

Â  Â  Â  Â  Â  Â  Â  Â  Estimate Recovery Time

Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-3xl shadow-xl p-6 border-l-4 border-teal-500">

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-lg font-medium text-gray-800 mb-4">Latest Achievement</p>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-4">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-teal-500 p-3 rounded-full flex items-center justify-center shadow-lg">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CheckCircle className="w-6 h-6 text-white" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-lg font-bold text-gray-900">{MOCK_PROGRESS.lastSession}</p>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 flex items-center gap-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Calendar className="w-3 h-3" /> {MOCK_PROGRESS.lastSessionDate}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  </div>



Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 gap-4">

Â  Â  Â  Â  Â  Â  Â  {/* Card 1: Total Reps */}

Â  Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-xl shadow-lg p-5 border-l-4 border-blue-500">

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 font-medium">Total Reps</p>

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-extrabold text-blue-600 mt-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  {MOCK_PROGRESS.totalReps}

Â  Â  Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  Â  </div>



Â  Â  Â  Â  Â  Â  Â  {/* Card 2: Average Accuracy */}

Â  Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-xl shadow-lg p-5 border-l-4 border-green-500">

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 font-medium">Avg. Accuracy</p>

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-extrabold text-green-600 mt-1 flex items-center">

Â  Â  Â  Â  Â  Â  Â  Â  Â  {MOCK_PROGRESS.avgAccuracy}%

Â  Â  Â  Â  Â  Â  Â  Â  Â  <TrendingUp className="w-5 h-5 ml-2 text-green-400" />

Â  Â  Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  Â  Â  {/* Card 3: Sessions This Week */}

Â  Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-xl shadow-lg p-5 col-span-2 border-l-4 border-indigo-500">

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 font-medium">Sessions This Week</p>

Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-extrabold text-indigo-600 mt-1">

Â  Â  Â  Â  Â  Â  Â  Â  Â  {MOCK_PROGRESS.sessionsThisWeek}

Â  Â  Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  Â  Â  {/* Call to Action for Report */}

Â  Â  Â  Â  Â  Â  Â <button

Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleDownloadPDF}

Â  Â  Â  Â  Â  Â  Â  Â  className="w-full bg-gray-800 text-white px-5 py-3 rounded-xl hover:bg-gray-700 flex items-center justify-center gap-2 transition-all shadow-xl transform hover:scale-[1.01]"

Â  Â  Â  Â  Â  Â  Â  >

Â  Â  Â  Â  Â  Â  Â  Â  <Download className="w-5 h-5" />

Â  Â  Â  Â  Â  Â  Â  Â  View Full Progress Report

Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â Â 

Â  Â  Â  Â  </div>

Â  Â  Â  </div>

Â  Â  Â Â 

Â  Â  Â  {/* Floating Chatbot */}

Â  Â  Â  <Chatbot />

Â  Â  </div>

Â  );

};
